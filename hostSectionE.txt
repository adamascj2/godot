using Godot;
using System;
using Steamworks;

public class hostSection : Panel
{
	 protected Callback<LobbyCreated_t> Callback_lobbyCreated;
	///B 
	 protected Callback<LobbyEnter_t> Callback_lobbyEntered;
	 Global global;
	  CSteamID lobbyID;
	 ///B
	///C
	 CSteamID joinID;
	Tree invitationTree;
	Button joinSelectedButton;
	Label joinSectionStatus;
	protected Callback<LobbyInvite_t> Callback_lobbyInvite;
	RichTextLabel chatBox;
	
	 protected Callback<LobbyChatUpdate_t> Callback_lobbyChatUpdate;
	///C
	///D
	LineEdit chatField;
	protected Callback<LobbyChatMsg_t> Callback_lobbyChatMessage;
	 string lastmessage;
	///D
	 
	public override void _Ready()
	{
		///C
		joinSectionStatus = GetParent().GetNode("../GUI/joinSection/joinSectionStatus") as Label;
		joinSelectedButton = GetParent().GetNode("../GUI/joinSection/joinSelectedButton") as Button;
		invitationTree = GetParent().GetNode("../GUI/joinSection/invitationTree") as Tree;
		chatBox = GetParent().GetNode("../GUI/chatSection/chatBox") as RichTextLabel;
		
		
		joinSelectedButton.Disabled = true;
		TreeItem item = invitationTree.CreateItem();
		item.SetText(0, "FRIEND");
		item.SetText(1, "JOIN/SALA ID");
		///C
		///D
		chatField = GetParent().GetNode("../GUI/chatSection/chatField") as LineEdit;
		 lastmessage="XXX";
		 
		///D
		//TreeItem item2 = invitationTree.CreateItem();
		//item2.SetText(0, "name");
		//item2.SetText(1, "1234567890");
		///C
		 GetNode<Button>("Button").Connect("pressed", this, nameof(_OnButtonPressed));
		 ///C
		 ///E
		GetNode<Button>("Button2").Connect("pressed", this, nameof(_OnSettingPlayer1));
		KinematicBody2D player1 = GetParent().GetNode("../GUI/player1") as KinematicBody2D;
		KinematicBody2D player2 = GetParent().GetNode("../GUI/player2") as KinematicBody2D;
		///E
		GetParent().GetNode<Tree>("../GUI/joinSection/invitationTree").Connect("item_selected", this, nameof(_OnItemSel));
		GetParent().GetNode<Tree>("../GUI/joinSection/invitationTree").Connect("nothing_selected", this, nameof(_OnNoSel));
		 joinSelectedButton.Connect("pressed", this, nameof(_OnJoinSelected));
		
		///C
		///D
		chatField.Connect("text_entered", this, nameof(_OnTextEntered));
		
		///D
		///B
		
		  global = GetParent().GetNode("../Global") as Global;
		 global.playingAsHost = false;
		 ///B
		
	}

	 public void _OnButtonPressed()
	//pressionou botao de criar host
	 {
		///B 
		 if (GetNode<Button>("Button").Text == "Enter SPACEWAR and create LOBBY-SALA")
		{
		///B
		 SteamAPICall_t newLobby = SteamMatchmaking.CreateLobby(ELobbyType.k_ELobbyTypeFriendsOnly, 2);
		 Callback_lobbyCreated = Callback<LobbyCreated_t>.Create(OnLobbyCreated);
		 
		GetNode<Button>("Button").Disabled = true;
		 global.playingAsHost = true;
	///B
		}
	else if (GetNode<Button>("Button").Text == "Cancel SPACEWAR and LOBBY-SALA") 
		{
			 SteamMatchmaking.LeaveLobby(lobbyID);
			GetNode<Button>("Button").Text = "Enter SPACEWAR and create LOBBY-SALA";
			GetNode<Label>("Label").Text = "Status: IDLE";
			 
		}
	 
		
	 }
	void OnLobbyCreated(LobbyCreated_t lobby)
	{
		GD.Print("Created lobby-sala!!!!");
		 if (lobby.m_eResult == EResult.k_EResultOK)
		{
			 
			 GetNode<Label>("Label").Text =  "Lobby-sala ID: " + lobby.m_ulSteamIDLobby + "\nWaiting for player to join...";
			////B
			lobbyID = (CSteamID)lobby.m_ulSteamIDLobby;
			GetNode<Button>("Button").Disabled = false;
			GetNode<Button>("Button").Text = "Cancel SPACEWAR and LOBBY-SALA";
			 Callback_lobbyEntered = Callback<LobbyEnter_t>.Create(OnLobbyEntered);
			
			////B
			
			}
	  else
			GetNode<Label>("Label").Text = "Failed to create lobby-sala.\nReason: " + lobby.m_eResult;
	///B
	  
	
	  
		 
		
		   }
	///B	
		  void OnLobbyEntered(LobbyEnter_t entrance)
	{
		///D
		chatField.Editable = true;
		global.global_lobbyID = (CSteamID)entrance.m_ulSteamIDLobby;
		///D
		if (global.playingAsHost)
		  {
			///C
			 lobbyID = (CSteamID)entrance.m_ulSteamIDLobby;
			///C
			 GD.Print("You just entered lobby-sala " + entrance.m_ulSteamIDLobby + " as host.");
		  }
		 else if (!global.playingAsHost)
		  {
			 
			 GD.Print("You just entered lobby-sala " + entrance.m_ulSteamIDLobby);
			///E 
			global.player2 = SteamUser.GetSteamID();
			global.player1 = SteamMatchmaking.GetLobbyOwner((CSteamID)entrance.m_ulSteamIDLobby);
			///E
			}
   ///B
////C
			Callback_lobbyInvite = Callback<LobbyInvite_t>.Create(OnLobbyInvite);
			Callback_lobbyChatUpdate = Callback<LobbyChatUpdate_t>.Create(OnLobbyChatUpdate);
			////C
			
}
///C
 void OnLobbyInvite(LobbyInvite_t invitation)
	{
		GD.Print("You have just been invited");
		// Display invitation in tree
		TreeItem item = invitationTree.CreateItem();
		item.SetText(0, SteamFriends.GetFriendPersonaName((CSteamID)invitation.m_ulSteamIDUser));
		item.SetText(1, invitation.m_ulSteamIDLobby.ToString());
	}
	
	
	public void _OnItemSel()
	 
	 {
		if (invitationTree.GetSelected().GetText(0) != "FRIEND")
			joinSelectedButton.Disabled = false;
		else
			joinSelectedButton.Disabled = true;
		}
	public void _OnNoSel()
	 
	 {
		joinSelectedButton.Disabled = true;
		}
		
		public void _OnJoinSelected()
	 
	 {
		 if (joinSelectedButton.Text == "Join selected")
		{
			global.playingAsHost = false;

			// Parse string from invitation tree into a CSteamID and join the lobby
			joinID = (CSteamID)ulong.Parse(invitationTree.GetSelected().GetText(1), System.Globalization.NumberStyles.None);
			 
			SteamMatchmaking.JoinLobby(joinID);
			 
			 
			 
			joinSelectedButton.Text = "Leave lobby-sala";
		}
		else if (joinSelectedButton.Text == "Leave lobby-sala")
		{
			SteamMatchmaking.LeaveLobby(joinID);
			joinSelectedButton.Text = "Join selected";
			///D
			chatField.Editable = false;
			///D
		}
		}
		 
		private void OnLobbyChatUpdate(LobbyChatUpdate_t update)
	{
		chatBox.AddText("\n" + SteamFriends.GetFriendPersonaName((CSteamID)update.m_ulSteamIDUserChanged) + " made a change in the lobby. Change: " + update.m_rgfChatMemberStateChange);
		 ///E
		 global.player2 = (CSteamID)update.m_ulSteamIDMakingChange;
		///E
	}
	///C
	///D
	public void _OnTextEntered(String new_text)
	{
		 chatField.Clear();
		byte[] message = System.Text.Encoding.UTF8.GetBytes(new_text);

		if (!SteamMatchmaking.SendLobbyChatMsg(global.global_lobbyID, message, message.Length)){
			chatBox.AddText("\nMessage failed to send.");
		}
		///D
			Callback_lobbyChatMessage = Callback<LobbyChatMsg_t>.Create(OnLobbyChatMessage);
			///D
	}
	private void OnLobbyChatMessage(LobbyChatMsg_t message)
	{   
		 
		byte[] messageData = new byte[32];
		SteamMatchmaking.GetLobbyChatEntry(global.global_lobbyID, (int)message.m_iChatID, out CSteamID user, messageData, messageData.Length, out EChatEntryType type);
		string messageString = System.Text.Encoding.UTF8.GetString(messageData);
		  if(messageString != lastmessage){
		   chatBox.AddText("\n" + SteamFriends.GetFriendPersonaName((CSteamID)message.m_ulSteamIDUser) + ": " + messageString);
			lastmessage = messageString;
		  } 
		 
		 
	}
	
	///D  
	 ///E
	public void _OnSettingPlayer1()
	 
	 {
		global.player1 = SteamUser.GetSteamID(); 
		 
	}
	///E
	
	 
	
}   

 

 


 



